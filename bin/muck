#!/usr/bin/env ruby
require 'net/http'
require 'uri'

$:.push File.expand_path("../../lib", __FILE__)

config_file_path = ENV['MUCK_CONFIG_PATH'] || File.expand_path('/config')

$stdout.sync = true
$stderr.sync = true

require 'muck/config'
require 'muck/logging'
require 'muck/mailer'

config = Muck::Config.new(config_file_path)

begin
  case ARGV[0]
  when 'run'
    results = config.run(:force => true)
    if mail_config = config.defaults[:mail]
      if mail_config[:enabled]
        Muck::Mailer.send_summary_email(mail_config[:recipient], results)
      end
    end
  when 'single'
    if server = config.servers.find { |s| s.name.downcase == ARGV[1].to_s.downcase }
      if database = server.databases.find { |d| d.name.downcase == ARGV[2].to_s.downcase }
        database.backup
      else
        puts "No database found matching name '#{ARGV[2]}' on #{server.name}"
        exit 1
      end
    else
      puts "No server found matching name '#{ARGV[1]}'"
      exit 1
    end
  when 'start'
    $running = false
    Signal.trap("INT")  { $exit = true; $running ? nil : exit(0) }
    Signal.trap("TERM") { $exit = true; $running ? nil : exit(0) }
    Muck.logger.info "\e[32mStarted Muck\e[0m"
    loop do
      $running = true
      results = config.run
      if mail_config = config.defaults[:mail]
        if mail_config[:enabled]
          Muck::Mailer.send_summary_email(mail_config[:recipient], results)
        end
      end
      $running = false

      $exit ? exit(0) : sleep(60)
    end
  else
    puts "usage: #{$0} [command]"
  end
rescue Muck::Error => e
  puts "\e[31mError: #{e.message}\e[0m"
end
